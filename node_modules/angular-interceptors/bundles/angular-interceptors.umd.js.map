{
  "version": 3,
  "file": "angular-interceptors.umd.js",
  "sources": [
    "ng://angular-interceptors/src/prefix-url.module.ts",
    "ng://angular-interceptors/src/prefix-url.interceptor.ts",
    "ng://angular-interceptors/src/ensure-https.module.ts",
    "ng://angular-interceptors/src/ensure-https.interceptor.ts",
    "ng://angular-interceptors/src/cache.module.ts",
    "ng://angular-interceptors/src/cache.interceptor.ts"
  ],
  "sourcesContent": [
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {PREFIX, PREFIX_URL_INTERCEPTOR_PROVIDER} from './prefix-url.interceptor';\r\nexport {PREFIX} from './prefix-url.interceptor';\r\n\r\n@NgModule()\r\nexport class PrefixUrlInterceptorModule {\r\n  /**\r\n   * Prefix HTTP request urls.\r\n   */\r\n  static forRoot(prefix: string): ModuleWithProviders {\r\n    return {\r\n      ngModule: PrefixUrlInterceptorModule,\r\n      providers: [PREFIX_URL_INTERCEPTOR_PROVIDER, {provide: PREFIX, useValue: prefix}]\r\n    };\r\n  }\r\n}\r\n",
    "import {HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor} from '@angular/common/http';\r\nimport {HttpRequest} from '@angular/common/http';\r\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\nexport const PREFIX = new InjectionToken<string>('prefix');\r\n\r\n@Injectable()\r\nexport class PrefixUrlInterceptor implements HttpInterceptor {\r\n  constructor(@Inject(PREFIX) public prefix) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req.clone({url: this.prefix + req.url}));\r\n  }\r\n}\r\n\r\nexport const PREFIX_URL_INTERCEPTOR_PROVIDER = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: PrefixUrlInterceptor,\r\n  multi: true\r\n};\r\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {ENSURE_HTTPS_INTERCEPTOR_PROVIDER} from './ensure-https.interceptor';\r\n\r\n@NgModule()\r\nexport class EnsureHttpsInterceptorModule {\r\n  /**\r\n   * Change `http://` to `https://` in HTTP request urls.\r\n   */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {ngModule: EnsureHttpsInterceptorModule, providers: [ENSURE_HTTPS_INTERCEPTOR_PROVIDER]};\r\n  }\r\n}\r\n",
    "import {HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor} from '@angular/common/http';\r\nimport {HttpRequest} from '@angular/common/http';\r\nimport {Injectable, InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class EnsureHttpsInterceptor implements HttpInterceptor {\r\n  cache = new Map<string, Observable<HttpEvent<any>>>();\r\n\r\n  constructor() {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req.clone({url: req.url.replace('http://', 'https://')}));\r\n  }\r\n}\r\n\r\nexport const ENSURE_HTTPS_INTERCEPTOR_PROVIDER = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: EnsureHttpsInterceptor,\r\n  multi: true\r\n};\r\n",
    "import {InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CACHE_INTERCEPTOR_PROVIDER, MAX_AGE_MS} from './cache.interceptor';\r\nexport {MAX_AGE_MS} from './cache.interceptor';\r\n\r\n@NgModule()\r\nexport class CacheInterceptorModule {\r\n  /**\r\n   * Cache all HTTP `GET` requests.\r\n   */\r\n  static forRoot(maxAgeMs: number = 5000): ModuleWithProviders {\r\n    return {\r\n      ngModule: CacheInterceptorModule,\r\n      providers: [CACHE_INTERCEPTOR_PROVIDER, {provide: MAX_AGE_MS, useValue: maxAgeMs}]\r\n    };\r\n  }\r\n}\r\n",
    "import {HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor} from '@angular/common/http';\r\nimport {HttpRequest} from '@angular/common/http';\r\nimport {Inject, Injectable, InjectionToken, Optional} from '@angular/core';\r\nimport {interval, Observable, throwError} from 'rxjs';\r\nimport {catchError, finalize, publishReplay, refCount, take} from 'rxjs/operators';\r\n\r\nexport const MAX_AGE_MS = new InjectionToken<string>('maxAgeMs');\r\n\r\n@Injectable()\r\nexport class CacheInterceptor implements HttpInterceptor {\r\n  cache = new Map<string, Observable<HttpEvent<any>>>();\r\n\r\n  constructor(@Inject(MAX_AGE_MS) @Optional() public maxAgeMs) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (!this.isCachable(req)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const cachedResponse = this.cache.get(req.urlWithParams);\r\n    if (cachedResponse) {\r\n      return cachedResponse;\r\n    }\r\n\r\n    const obs$ = next.handle(req).pipe(\r\n        finalize(\r\n            () => interval(this.maxAgeMs)\r\n                      .pipe(take(1))\r\n                      .subscribe(() => this.cache.delete(req.urlWithParams))),\r\n        publishReplay(), refCount(), catchError(err => throwError(err)));\r\n    this.cache.set(req.urlWithParams, obs$);\r\n\r\n    return obs$;\r\n  }\r\n\r\n  private isCachable(req: HttpRequest<any>) {\r\n    return req.method === 'GET' && !req.headers.get('disable-cache');\r\n  }\r\n}\r\n\r\nexport const CACHE_INTERCEPTOR_PROVIDER = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: CacheInterceptor,\r\n  multi: true\r\n};\r\n"
  ],
  "names": [
    "HTTP_INTERCEPTORS",
    "InjectionToken",
    "publishReplay",
    "refCount",
    "catchError",
    "throwError",
    "take",
    "interval",
    "finalize"
  ],
  "mappings": ";;;;;;;;;;AKAA,QAMA,iBAAA,UAAA,GAAA,IAAAC,mBAAA,CAAA,UAAA,CAAA,CAA+D;AAG/D,QAAA,gBAAA,IAAA;;;;QAGE,0BAAF,QAAA;YAAqD,IAArD,CAAA,QAA6D,GAAR,QAAQ,CAA7D;YAFA,IAAA,CAAA,KAAA,GAAU,IAAI,GAAG,EAAsC,CAAvD;SAEiE;;;;;;QAE/D,gBAAF,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,GAAA,EAAA,IAAA;YACI,IAAI,KAAK,GAAb,IAAA,CAAA;YACA,IAAM,CAAN,IAAA,CAAY,UAAZ,CAAA,GAAA,CAAA,EAA6B;gBAC7B,OAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA;aAEA;YACI,qBAAqB,cAAzB,GAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,CAAA,aAAA,CAAA,CAAA;YACA,IAAM,cAAN,EAAA;gBACA,OAAA,cAAA,CAAA;aAEA;YAGA,qBAAA,IAAA,GAAA,IAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAAO,kBAAA,CAAA;gBAAA,OAAAD,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA;qBACuB,IAAvB,CAAAD,cAAgC,CAAC,CAAjC,CAAA,CAAoC;qBAE3B,SAAS,CAAC,cAAnB,OAAA,KAAA,CAAA,KAAA,CAAA,MAAA,CAAA,GAAA,CAAA,aAAA,CAAA,CAAA,EAAA,CAAA,CAAA;aAAA,CAAA,EAAAJ,uBAAA,EAAA,EAAAC,kBAAA,EAAA,EAAAC,oBAAA,CAAA,UAAA,GAAA,IAAA,OAAAC,eAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;YAEI,IAAJ,CAAA,KAAA,CAAe,GAAf,CAAA,GAAA,CAAA,aAAA,EAAA,IAAA,CAAA,CAAA;YACA,OAAA,IAAA,CAAA;;;;;;QAGA,gBAAA,CAAA,SAA0B,CAA1B,UAAA,GAAwC,UAAxC,GAAA;;;;IA5BA,CAAA,EAAA,CAAA,CAAA;;;KAIA,CAAA;;;;;;;QA+BS,iBAAT,0BAAA,GAAA;QACA,OAAA,EAAAL,sBAAA;;;;;;;;AD5CA,QAKA,sBAAA,IAAA;;;;;;;;QAMA,sBAAA,CAAA,OAAA,GAAA,UAAA,QAAA;YACA,IAAM,QAAN,KAAA,KAAA,CAAA,EAAA;gBAAA,QAAA,GAAA,IAA4C,CAA5C;aAAA;YACA,OAAA;gBACA,QAAA,EAAA,sBAAA;;;SAVA,CAAA;;;;;;;;;;ADJA,QAMA,sBAAA,IAAA;QAGE;YAFF,IAAA,CAAA,KAAA,GAAU,IAAI,GAAG,EAAsC,CAAvD;SAEkB;;;;;;QAEhB,sBAAF,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,GAAA,EAAA,IAAA;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,EAAC,CAAC,CAAC,CAAC;SAC9E,CAAH;;;IARA;;;;;QAaA,iBAAA,iCAAA,GAAA;QACE,OAAO,EAATA,sBAAA;QACA,QAAA,EAAA,sBAAA;;;;;;;ADpBA,QAIA,4BAAA,IAAA;;;;;;;QAMA,4BAAA,CAAA,OAAA,GAAA;;;QAPA,OAAA,4BAAA,CAAA;;;;;;;;;ADHA,QAKA,iBAAA,MAAA,GAAA,IAAAC,mBAAA,CAAA,QAAA,CAAA,CAAyD;AAGzD,QAAA,oBAAA,IAAA;;;;QACE,8BAAF,MAAA;YAAqC,IAArC,CAAA,MAA2C,GAAN,MAAM,CAA3C;SAA+C;;;;;;QAE7C,oBAAF,CAAA,SAAA,CAAA,SAAA,GAAA,UAAA,GAAA,EAAA,IAAA;YACI,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAC,GAAG,EAAE,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG,EAAC,CAAC,CAAC,CAAC;SAC7D,CAAH;;;IANA;;;;;;;;;QAWA,iBAAA,+BAAA,GAAA;QACE,OAAO,EAATD,sBAAA;QACA,QAAA,EAAA,oBAAA;;;;;;;ADpBA,QAKA,0BAAA,IAAA;;;;;;;;QAMA,0BAAA,CAAA,OAAA,GAAA,UAAA,MAAA;YACA,OAAA;gBACA,QAAA,EAAA,0BAAA;gBACA,SAAA,EAAA,CAAA,+BAAA,EAAA,EAAA,OAAA,EAAA,MAAA,EAAA,QAAA,EAAA,MAAA,EAAA,CAAA;;;QAVA,OAAA,0BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;"
}
