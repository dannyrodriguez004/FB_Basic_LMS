{
  "version": 3,
  "file": "angular-interceptors.umd.min.js",
  "sources": [
    "ng://angular-interceptors/src/cache.interceptor.ts",
    "ng://angular-interceptors/src/cache.module.ts",
    "ng://angular-interceptors/src/ensure-https.interceptor.ts",
    "ng://angular-interceptors/src/ensure-https.module.ts",
    "ng://angular-interceptors/src/prefix-url.interceptor.ts",
    "ng://angular-interceptors/src/prefix-url.module.ts"
  ],
  "sourcesContent": [
    "import {HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor} from '@angular/common/http';\r\nimport {HttpRequest} from '@angular/common/http';\r\nimport {Inject, Injectable, InjectionToken, Optional} from '@angular/core';\r\nimport {interval, Observable, throwError} from 'rxjs';\r\nimport {catchError, finalize, publishReplay, refCount, take} from 'rxjs/operators';\r\n\r\nexport const MAX_AGE_MS = new InjectionToken<string>('maxAgeMs');\r\n\r\n@Injectable()\r\nexport class CacheInterceptor implements HttpInterceptor {\r\n  cache = new Map<string, Observable<HttpEvent<any>>>();\r\n\r\n  constructor(@Inject(MAX_AGE_MS) @Optional() public maxAgeMs) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    if (!this.isCachable(req)) {\r\n      return next.handle(req);\r\n    }\r\n\r\n    const cachedResponse = this.cache.get(req.urlWithParams);\r\n    if (cachedResponse) {\r\n      return cachedResponse;\r\n    }\r\n\r\n    const obs$ = next.handle(req).pipe(\r\n        finalize(\r\n            () => interval(this.maxAgeMs)\r\n                      .pipe(take(1))\r\n                      .subscribe(() => this.cache.delete(req.urlWithParams))),\r\n        publishReplay(), refCount(), catchError(err => throwError(err)));\r\n    this.cache.set(req.urlWithParams, obs$);\r\n\r\n    return obs$;\r\n  }\r\n\r\n  private isCachable(req: HttpRequest<any>) {\r\n    return req.method === 'GET' && !req.headers.get('disable-cache');\r\n  }\r\n}\r\n\r\nexport const CACHE_INTERCEPTOR_PROVIDER = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: CacheInterceptor,\r\n  multi: true\r\n};\r\n",
    "import {InjectionToken, ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {CACHE_INTERCEPTOR_PROVIDER, MAX_AGE_MS} from './cache.interceptor';\r\nexport {MAX_AGE_MS} from './cache.interceptor';\r\n\r\n@NgModule()\r\nexport class CacheInterceptorModule {\r\n  /**\r\n   * Cache all HTTP `GET` requests.\r\n   */\r\n  static forRoot(maxAgeMs: number = 5000): ModuleWithProviders {\r\n    return {\r\n      ngModule: CacheInterceptorModule,\r\n      providers: [CACHE_INTERCEPTOR_PROVIDER, {provide: MAX_AGE_MS, useValue: maxAgeMs}]\r\n    };\r\n  }\r\n}\r\n",
    "import {HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor} from '@angular/common/http';\r\nimport {HttpRequest} from '@angular/common/http';\r\nimport {Injectable, InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Injectable()\r\nexport class EnsureHttpsInterceptor implements HttpInterceptor {\r\n  cache = new Map<string, Observable<HttpEvent<any>>>();\r\n\r\n  constructor() {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req.clone({url: req.url.replace('http://', 'https://')}));\r\n  }\r\n}\r\n\r\nexport const ENSURE_HTTPS_INTERCEPTOR_PROVIDER = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: EnsureHttpsInterceptor,\r\n  multi: true\r\n};\r\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {ENSURE_HTTPS_INTERCEPTOR_PROVIDER} from './ensure-https.interceptor';\r\n\r\n@NgModule()\r\nexport class EnsureHttpsInterceptorModule {\r\n  /**\r\n   * Change `http://` to `https://` in HTTP request urls.\r\n   */\r\n  static forRoot(): ModuleWithProviders {\r\n    return {ngModule: EnsureHttpsInterceptorModule, providers: [ENSURE_HTTPS_INTERCEPTOR_PROVIDER]};\r\n  }\r\n}\r\n",
    "import {HTTP_INTERCEPTORS, HttpEvent, HttpHandler, HttpInterceptor} from '@angular/common/http';\r\nimport {HttpRequest} from '@angular/common/http';\r\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\n\r\nexport const PREFIX = new InjectionToken<string>('prefix');\r\n\r\n@Injectable()\r\nexport class PrefixUrlInterceptor implements HttpInterceptor {\r\n  constructor(@Inject(PREFIX) public prefix) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req.clone({url: this.prefix + req.url}));\r\n  }\r\n}\r\n\r\nexport const PREFIX_URL_INTERCEPTOR_PROVIDER = {\r\n  provide: HTTP_INTERCEPTORS,\r\n  useClass: PrefixUrlInterceptor,\r\n  multi: true\r\n};\r\n",
    "import {ModuleWithProviders, NgModule} from '@angular/core';\r\nimport {PREFIX, PREFIX_URL_INTERCEPTOR_PROVIDER} from './prefix-url.interceptor';\r\nexport {PREFIX} from './prefix-url.interceptor';\r\n\r\n@NgModule()\r\nexport class PrefixUrlInterceptorModule {\r\n  /**\r\n   * Prefix HTTP request urls.\r\n   */\r\n  static forRoot(prefix: string): ModuleWithProviders {\r\n    return {\r\n      ngModule: PrefixUrlInterceptorModule,\r\n      providers: [PREFIX_URL_INTERCEPTOR_PROVIDER, {provide: PREFIX, useValue: prefix}]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "MAX_AGE_MS",
    "InjectionToken",
    "CacheInterceptor",
    "maxAgeMs",
    "this",
    "cache",
    "Map",
    "prototype",
    "intercept",
    "req",
    "next",
    "_this",
    "isCachable",
    "handle",
    "cachedResponse",
    "get",
    "urlWithParams",
    "obs$",
    "pipe",
    "finalize",
    "interval",
    "take",
    "subscribe",
    "delete",
    "publishReplay",
    "refCount",
    "catchError",
    "err",
    "throwError",
    "set",
    "CACHE_INTERCEPTOR_PROVIDER",
    "provide",
    "HTTP_INTERCEPTORS",
    "CacheInterceptorModule",
    "forRoot",
    "ngModule",
    "EnsureHttpsInterceptor",
    "clone",
    "url",
    "replace",
    "ENSURE_HTTPS_INTERCEPTOR_PROVIDER",
    "useClass",
    "EnsureHttpsInterceptorModule",
    "PREFIX",
    "PrefixUrlInterceptor",
    "prefix",
    "PREFIX_URL_INTERCEPTOR_PROVIDER",
    "PrefixUrlInterceptorModule",
    "providers",
    "useValue"
  ],
  "mappings": "qcAAA,IAMAA,EAAA,IAAAC,EAAAA,eAAA,YAGAC,EAAA,WAGE,SAAAA,EAAFC,GAAqDC,KAArDD,SAAqDA,EAFrDC,KAAAC,MAAU,IAAIC,WAIZJ,EAAFK,UAAAC,UAAA,SAAAC,EAAAC,GACI,IAAIC,EAARP,KACA,IAAAA,KAAYQ,WAAZH,GACA,OAAAC,EAAAG,OAAAJ,GAGI,IAAqBK,EAAzBV,KAAAC,MAAAU,IAAAN,EAAAO,eACA,GAAMF,EACN,OAAAA,EAKA,IAAAG,EAAAP,EAAAG,OAAAJ,GAAAS,KAAAC,EAAAA,SAAA,WAAA,OAAAC,EAAAA,SAAAT,EAAAR,UACuBe,KAAvBG,EAAAA,KAAiC,IAExBC,UAAU,WAAnB,OAAAX,EAAAN,MAAAkB,UAAAd,EAAAO,mBAAAQ,EAAAA,gBAAAC,EAAAA,WAAAC,EAAAA,WAAA,SAAAC,GAAA,OAAAC,EAAAA,WAAAD,MAGA,OADIvB,KAAJC,MAAewB,IAAfpB,EAAAO,cAAAC,GACAA,GAGAf,EAAAK,UAAAK,WAAwC,SAAxCH,8DA3BA,wJAkCAqB,GACAC,QAAAC,EAAAA,uCCvCAC,EAAA,gCAMAA,EAAAC,QAAA,SAAA/B,GAEA,YADA,IAAMA,IAANA,EAAA,MAEAgC,SAAAF,2CATA,oCCLA,IAMAG,EAAA,WAGE,SAAAA,IAFFhC,KAAAC,MAAU,IAAIC,WAIZ8B,EAAF7B,UAAAC,UAAA,SAAAC,EAAAC,GACI,OAAOA,EAAKG,OAAOJ,EAAI4B,OAAOC,IAAK7B,EAAI6B,IAAIC,QAAQ,UAAW,kBANlE,GADAH,6EAaAI,GACET,QAAFC,EAAAA,kBACAS,SAAAL,YChBAM,EAAA,yBADA,OAOAA,EAAAR,QAAA,6CAPAQ,EACA,oCCJA,IAKAC,EAAA,IAAA1C,EAAAA,eAAA,UAGA2C,EAAA,WACE,SAAAA,EAAFC,GAAqCzC,KAArCyC,OAAqCA,SAEnCD,EAAFrC,UAAAC,UAAA,SAAAC,EAAAC,GACI,OAAOA,EAAKG,OAAOJ,EAAI4B,OAAOC,IAAKlC,KAAKyC,OAASpC,EAAI6B,UAJzD,GADAM,mIAWAE,GACEf,QAAFC,EAAAA,kBACAS,SAAAG,YCfAG,EAAA,yBADA,OAOAA,EAAAb,QAAA,SAAAW,GACA,OACAV,SAAAY,EACAC,WAAAF,GAAAf,QAAAY,EAAAM,SAAAJ,MAVAE,EACA"
}
